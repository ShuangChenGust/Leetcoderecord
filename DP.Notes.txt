DP 问题
1、拆分问题：看看问题是否能拆分成若干个子问题，从而通过解决子问题得到整个问题的解。（自顶向下）
2、找出子问题间的的关联，从而将其状态转移方程确定（自底向上，最难的一步）
3、解决问题（用数组或变量将其状态存储，并进行递归求解）
-计数
-最值问题
-存在行问题

1.确定状态
 	最后一步
	子问题
￼
￼
2.

几个变量开几维数组：
￼
Js定义二维数组：
    let dp=[];
    for (let i = 0; i <= m; i++) {
        dp[i] = [];
    }
动态规划时，要考虑是结果数组还是原数组


确定状态
	研究最后一步-化为子问题
转移方程
	根据子问题定义直接到到
初始条件和边界情况
	细心 考虑周全
计算顺序
	利用之前的结果

模版题目：
深度优先搜索，递归，图

I = 0;
J = a.lengh;
反转数组：while(I <j){
	t = a[I];
a[I] = a[j];
a[j] = t;
++I;
—j;
}
滚动数组：
空间型动态规划 如果m,n 每一行只依赖于前一行，则可用
空间复杂度从O（m+N）降低到O2N 即为ON
