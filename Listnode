ListNode
链表由于不必须按顺序存储，链表在插入的时候可以达到O(1)的复杂度，但是查找一个节点或者访问特定编号的节点则需要O(n)的时间。

使用链表结构可以克服数组需要预先知道数据大小的缺点，链表结构可以充分利用计算机内存空间，实现灵活的内存动态管理。

但是链表失去了数组随机读取的优点

同时链表由于增加了结点的指针域，空间开销比较大。

链表最明显的好处就是，常规数组排列关联项目的方式可能不同于这些数据项目在记忆体或磁盘上顺序，数据的存取往往要在不同的排列顺序中转换。链表允许插入和移除表上任意位置上的节点，但是不允许随机存取。链表有很多种不同的类型：单向链表 双向链表 以及 循环链表 。链表可以在多种编程语言中实现。

链表是数据结构中最基本常用的，C++语言中单链表是利用指针操作实现的，python作为面向对象编程的，可以使用创建一个ListNode类来实现链表，利用类的属性引用来代替指针操作。

作者：三也视界
链接：https://www.jianshu.com/p/5875efe4748d
来源：简书
著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。

21. Merge Two Sorted Lists
Easy

3408

506

Add to List

Share
Merge two sorted linked lists and return it as a new list. The new list should be made by splicing together the nodes of the first two lists.

Example:

Input: 1->2->4, 1->3->4
Output: 1->1->2->3->4->4



# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution:
    def mergeTwoLists(self, l1: ListNode, l2: ListNode) -> ListNode:
        head = l3 = ListNode(0)
        while (l1 is not None and l2 is not None):
            if l1.val <= l2.val :            
                l3.next = ListNode(l1.val)
                l3 = l3.next
                l1 = l1.next
            else :
                l3.next = ListNode(l2.val)
                l3 = l3.next
                l2 = l2.next
        while l1:
            l3.next = ListNode(l1.val)
            l3 = l3.next
            l1 = l1.next
        while l2:
            l3.next = ListNode(l2.val)
            l3 = l3.next
            l2 = l2.next
        return head.next
